import torch

from behavior import data_augmentation as bau


def test_jitter_torch():
    torch.manual_seed(123)

    # tx = 7 * torch.rand(10,3, dtype=torch.float32) - 3.5
    tx = torch.tensor(
        [
            [2.9878, 1.6713, 1.5252],
            [1.4409, 2.9095, -0.4621],
            [-2.9599, -1.0043, -2.4650],
            [0.2314, -0.6535, -1.8773],
            [-0.3182, 3.3159, -0.2761],
            [0.1111, -0.5459, 0.5502],
            [3.1185, 2.1402, 1.2424],
            [0.7606, 0.8253, 1.3522],
            [-0.4523, -3.2529, -2.1644],
            [2.9875, 0.2092, -2.8353],
        ]
    )

    expected = torch.tensor(
        [
            [3.0046, 1.6624, 1.5100],
            [1.4115, 2.9270, -0.4291],
            [-2.9709, -1.0233, -2.4266],
            [0.1717, -0.6186, -1.9478],
            [-0.3093, 3.4107, -0.2076],
            [0.0310, -0.6121, 0.5591],
            [3.0119, 2.1928, 1.2229],
            [0.7139, 0.9169, 1.3353],
            [-0.4083, -3.1752, -2.1331],
            [2.9788, 0.2141, -2.8399],
        ]
    )
    y2 = bau.RandomJitter(sigma=0.05)(tx)
    assert torch.allclose(y2, expected, atol=1e-4)


def test_scaling_torch():
    torch.manual_seed(123)

    # tx = 6 * torch.rand(10,3, dtype=torch.float32) - 3
    tx = torch.tensor(
        [
            [2.9878, 1.6713, 1.5252],
            [1.4409, 2.9095, -0.4621],
            [-2.9599, -1.0043, -2.4650],
            [0.2314, -0.6535, -1.8773],
            [-0.3182, 3.3159, -0.2761],
            [0.1111, -0.5459, 0.5502],
            [3.1185, 2.1402, 1.2424],
            [0.7606, 0.8253, 1.3522],
            [-0.4523, -3.2529, -2.1644],
            [2.9875, 0.2092, -2.8353],
        ]
    )

    expected = torch.tensor(
        [
            [2.9711, 1.6814, 1.4970],
            [1.4329, 2.9270, -0.4536],
            [-2.9434, -1.0103, -2.4194],
            [0.2301, -0.6574, -1.8426],
            [-0.3164, 3.3359, -0.2710],
            [0.1105, -0.5492, 0.5400],
            [3.1011, 2.1531, 1.2194],
            [0.7564, 0.8303, 1.3272],
            [-0.4498, -3.2725, -2.1244],
            [2.9708, 0.2105, -2.7829],
        ]
    )
    y2 = bau.RandomScaling(sigma=0.05)(tx)
    assert torch.allclose(y2, expected, atol=1e-4)


def test_time_warp_torch():
    torch.manual_seed(123)

    # tx = 6 * torch.rand(10,3, dtype=torch.float32) - 3
    tx = torch.tensor(
        [
            [2.9878, 1.6713, 1.5252],
            [1.4409, 2.9095, -0.4621],
            [-2.9599, -1.0043, -2.4650],
            [0.2314, -0.6535, -1.8773],
            [-0.3182, 3.3159, -0.2761],
            [0.1111, -0.5459, 0.5502],
            [3.1185, 2.1402, 1.2424],
            [0.7606, 0.8253, 1.3522],
            [-0.4523, -3.2529, -2.1644],
            [2.9875, 0.2092, -2.8353],
        ]
    )

    expected = torch.tensor(
        [
            [2.9878, 1.6713, 1.5252],
            [1.3365, 2.8607, -0.5304],
            [-2.9749, -1.0593, -2.4864],
            [0.2788, -0.5665, -1.8352],
            [-0.3155, 3.3117, -0.3090],
            [0.1355, -0.5533, 0.5608],
            [3.1043, 2.1127, 1.2285],
            [0.8846, 1.0000, 1.4570],
            [-0.4707, -3.2467, -2.1285],
            [2.9875, 0.2092, -2.8353],
        ]
    )
    # y2 = bau.time_warp_torch(tx, sigma=0.05)
    y2 = bau.TimeWarp(sigma=0.05)(tx)
    assert torch.allclose(y2, expected, atol=1e-4)


def test_magnitude_warp_torch():
    torch.manual_seed(123)

    # tx = 6 * torch.rand(10,3, dtype=torch.float32) - 3
    tx = torch.tensor(
        [
            [2.9878, 1.6713, 1.5252],
            [1.4409, 2.9095, -0.4621],
            [-2.9599, -1.0043, -2.4650],
            [0.2314, -0.6535, -1.8773],
            [-0.3182, 3.3159, -0.2761],
            [0.1111, -0.5459, 0.5502],
            [3.1185, 2.1402, 1.2424],
            [0.7606, 0.8253, 1.3522],
            [-0.4523, -3.2529, -2.1644],
            [2.9875, 0.2092, -2.8353],
        ]
    )

    expected = torch.tensor(
        [
            [2.9711, 1.6620, 1.5167],
            [1.4459, 2.9196, -0.4637],
            [-2.9732, -1.0088, -2.4760],
            [0.2289, -0.6464, -1.8570],
            [-0.3124, 3.2553, -0.2710],
            [0.1101, -0.5408, 0.5452],
            [3.0242, 2.0754, 1.2048],
            [0.7149, 0.7757, 1.2710],
            [-0.4369, -3.1423, -2.0909],
            [3.0188, 0.2114, -2.8649],
        ]
    )
    # y2 = bau.magnitude_warp_torch(tx, sigma=0.05, knot=4)
    y2 = bau.MagnitudeWarp(sigma=0.05, knot=4)(tx)
    assert torch.allclose(y2, expected, atol=1e-4)
